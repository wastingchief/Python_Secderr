##Script is work in progress
##Still needs to be edited and tested


import socket
import os
import structure
from ctypes import *
####ALL IP SNIFF AS OF NOW
####LEARN FOR FULL NMAP PORT SCANS ON ANY HOSTS DISCOVERD 

host = ' ' #host to listen for


class IP(Structure):    #Packet Structure - in c 
    _fields_ = [
        ("ihl", c_ubyte, 4)
        ("version", c_ubyte, 4)
        ("tos", c_ubyte)
        ("len", c_ushort)
        ("id", c_ushort)
        ("offset", c_ushort)
        ("ttl", c_ubyte)
        ("protocol_num", c_ubyte)
        ("sum", c_ushort)
        ("src", c_ulong)
        ("dst", c_ulong)
        ]


    def __new__(self, socket_buffer=None):
        return self.from_buffer_copy(socket_buffer)


    def __init__(self, socket_buffer=None):#Protocol Constants 
        self.protocol_map = {1: "ICMP",
                             6: "TCP",
                             12: "UDP"
                             }

        
        #Human Readable IP address

        self.src_address = socket.inet_ntoa(struct.pack(<L, self.src))
        self.dst_address = socket.inet_ntoa(struct.pack(<L, self.dst))


        #Human Readable Protocol

        try:
            self.protocol = self.protocol_map[self.protocol_num]
        except:
            self.protocol = str(self.protocol_num)
            
    
        


if os.name == "nt":
    socket_protocol = socket.IPPROTO_IP #Set up data relay 
else:
    socket_protocol = socket.IPPROTO_ICMP #Relay for Linux////Intermediary 

sniffer = socket.socket(socket.AF_INET,#We are using IPv4 address 
                        socket.SOCK_RAW,
                        socket_protocol
                        )


sniffer.bind((host,
              0
              ))

#including == 
sniffer.setsockopt(socket.IPPROTO_IP,
                   socket.IP_HDRINCL,
                   1
                   )


if os.name == "nt":   #Sending IOCTL to set up PROMISCUOUS mode
    sniffer.ioctl(socket.SIO_RCVALL,
                  socket.RCVALL_ON
                  )#SystemInputOutput==RootControlValue 


try:
    while True:
        
        
        raw_buffer = sniffer.recvfrom(65565)[0]
        ip_header = IP(raw_buffer[0:20])

        print "Protocol: %s %s -> %s" % (ip_header.protocol,
                                      ip_header.src_address,
                                      ip_header.des_address
                                      )

        
except KetBoardInterrupt:


    if os.name == "nt": 
        sniffer.ioctl(socket.SIO_RCVALL,
                      socket.RCVALL_OFF
                      )

    
    





    

